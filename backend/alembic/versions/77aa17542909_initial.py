"""initial

Revision ID: 77aa17542909
Revises: 
Create Date: 2025-10-03 15:23:40.119921

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '77aa17542909'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
from sqlalchemy.sql import text
from app.core.security import get_password_hash  # Импортируем функцию хеширования


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('table_name', sa.String(length=255), nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=20), nullable=False),
    sa.Column('old_data', sa.JSON(), nullable=True),
    sa.Column('new_data', sa.JSON(), nullable=True),
    sa.Column('changed_fields', sa.JSON(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_record_id'), 'audit_logs', ['record_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_table_name'), 'audit_logs', ['table_name'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Enum('ENGINEER', 'MANAGER', 'LEADER', 'SUPERADMIN', name='role_name', native_enum=False), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('profiles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('avatar_url', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('middle_name', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('manager_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PLANNING', 'ACTIVE', 'COMPLETED', 'PAUSED', name='project_status', native_enum=False), nullable=False),
    sa.ForeignKeyConstraint(['manager_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_projects_id'), 'projects', ['id'], unique=False)
    op.create_index(op.f('ix_projects_manager_id'), 'projects', ['manager_id'], unique=False)
    op.create_index(op.f('ix_projects_name'), 'projects', ['name'], unique=False)
    op.create_table('defects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='defect_priority', native_enum=False), nullable=False),
    sa.Column('status', sa.Enum('NEW', 'IN_PROGRESS', 'UNDER_REVIEW', 'CLOSED', 'CANCELED', name='defect_status', native_enum=False), nullable=False),
    sa.Column('assignee', sa.String(length=255), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('attachments', sa.JSON(), nullable=True),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_defects_creator_id'), 'defects', ['creator_id'], unique=False)
    op.create_index(op.f('ix_defects_id'), 'defects', ['id'], unique=False)
    op.create_index(op.f('ix_defects_project_id'), 'defects', ['project_id'], unique=False)
    op.create_index(op.f('ix_defects_title'), 'defects', ['title'], unique=False)
    op.create_table('reports',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('project_id', sa.BigInteger(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reports_id'), 'reports', ['id'], unique=False)
    op.create_index(op.f('ix_reports_project_id'), 'reports', ['project_id'], unique=False)
    op.create_index(op.f('ix_reports_title'), 'reports', ['title'], unique=False)
    op.create_index(op.f('ix_reports_user_id'), 'reports', ['user_id'], unique=False)
    # ### end Alembic commands ###

    op.execute("""
    CREATE OR REPLACE FUNCTION audit_trigger_function()
    RETURNS TRIGGER AS $$
    DECLARE
        old_row JSONB;
        new_row JSONB;
        changed_fields JSONB := '[]'::jsonb;
        action_type TEXT;
        table_name_ru TEXT;
        record_id INTEGER;
        key TEXT;
    BEGIN
        -- Determine action type
        IF TG_OP = 'INSERT' THEN
            action_type := 'INSERT';
            old_row := NULL;
            new_row := row_to_json(NEW)::JSONB;
        ELSIF TG_OP = 'UPDATE' THEN
            action_type := 'UPDATE';
            old_row := row_to_json(OLD)::JSONB;
            new_row := row_to_json(NEW)::JSONB;

            -- Calculate changed fields
            FOR key IN SELECT jsonb_object_keys(new_row)
            LOOP
                IF (new_row->key) IS DISTINCT FROM (old_row->key) THEN
                    changed_fields := changed_fields || jsonb_build_array(key);
                END IF;
            END LOOP;
        ELSIF TG_OP = 'DELETE' THEN
            action_type := 'DELETE';
            old_row := row_to_json(OLD)::JSONB;
            new_row := NULL;
        END IF;

        -- Translate table name to Russian
        table_name_ru := CASE 
            WHEN TG_TABLE_NAME = 'users' THEN 'пользователи'
            WHEN TG_TABLE_NAME = 'defects' THEN 'дефекты'
            WHEN TG_TABLE_NAME = 'projects' THEN 'проекты'
            WHEN TG_TABLE_NAME = 'profiles' THEN 'профили'
            WHEN TG_TABLE_NAME = 'roles' THEN 'роли'
            WHEN TG_TABLE_NAME = 'reports' THEN 'отчеты'
            ELSE TG_TABLE_NAME
        END;

        -- Determine the primary key based on table name
        IF TG_TABLE_NAME = 'profiles' THEN
            record_id := COALESCE(NEW.user_id, OLD.user_id);
        ELSE
            record_id := COALESCE(NEW.id, OLD.id);
        END IF;

        -- Insert audit log entry
        INSERT INTO audit_logs (
            table_name,
            record_id,
            action,
            old_data,
            new_data,
            changed_fields,
            comment
        ) VALUES (
            TG_TABLE_NAME,
            record_id,
            action_type,
            old_row,
            new_row,
            CASE WHEN action_type = 'UPDATE' THEN changed_fields ELSE NULL END,
            CASE 
                WHEN action_type = 'INSERT' THEN 'ВСТАВКА' 
                WHEN action_type = 'UPDATE' THEN 'ОБНОВЛЕНИЕ' 
                WHEN action_type = 'DELETE' THEN 'УДАЛЕНИЕ' 
            END || ' в ' || table_name_ru
        );

        -- Return appropriate row based on operation
        IF TG_OP = 'DELETE' THEN
            RETURN OLD;
        ELSE
            RETURN NEW;
        END IF;
    END;
    $$ LANGUAGE plpgsql;
    """)

    # Create triggers for main tables
    tables_to_audit = ['users', 'defects', 'projects', 'profiles', 'roles', 'reports']

    for table_name in tables_to_audit:
        op.execute(f"""
        CREATE TRIGGER audit_trigger_{table_name}
            AFTER INSERT OR UPDATE OR DELETE ON {table_name}
            FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();
        """)
    op.bulk_insert(
        sa.table('roles', sa.column('id', sa.Integer), sa.column('name', sa.String)),
        [
            {'id': 1, 'name': 'ENGINEER'},
            {'id': 2, 'name': 'MANAGER'},
            {'id': 3, 'name': 'LEADER'},
            {'id': 4, 'name': 'SUPERADMIN'},
        ]
    )
    admin_password = get_password_hash("admin123")  # Хешируем пароль
    op.bulk_insert(
        sa.table('users',
            sa.Column('id', sa.Integer),
            sa.Column('email', sa.String),
            sa.Column('username', sa.String),
            sa.Column('hashed_password', sa.String),
            sa.Column('role_id', sa.Integer)
        ),
        [
            {
                'id': 1,
                'email': 'superadmin@example.com',
                'username': 'superadmin',
                'hashed_password': admin_password,
                'role_id': 4  # ID роли admin
            }
        ]
    )
    op.execute(text("SELECT setval(pg_get_serial_sequence('users', 'id'), (SELECT MAX(id) FROM users))"))
    op.bulk_insert(
        sa.table(
            'profiles',
            sa.column('user_id', sa.Integer),
            sa.column('avatar_url', sa.String),
            sa.column('first_name', sa.String),
            sa.column('last_name', sa.String),
            sa.column('middle_name', sa.String)
        ),
        [
            {
                'user_id': 1,
                'avatar_url': '/static/avatars/default_avatar.png',
                'first_name': 'Admin',
                'last_name': 'Super',
                'middle_name': None
            }
        ]
    )

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_reports_user_id'), table_name='reports')
    op.drop_index(op.f('ix_reports_title'), table_name='reports')
    op.drop_index(op.f('ix_reports_project_id'), table_name='reports')
    op.drop_index(op.f('ix_reports_id'), table_name='reports')
    op.drop_table('reports')
    op.drop_index(op.f('ix_defects_title'), table_name='defects')
    op.drop_index(op.f('ix_defects_project_id'), table_name='defects')
    op.drop_index(op.f('ix_defects_id'), table_name='defects')
    op.drop_index(op.f('ix_defects_creator_id'), table_name='defects')
    op.drop_table('defects')
    op.drop_index(op.f('ix_projects_name'), table_name='projects')
    op.drop_index(op.f('ix_projects_manager_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_id'), table_name='projects')
    op.drop_table('projects')
    op.drop_table('profiles')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_audit_logs_table_name'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_record_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    # ### end Alembic commands ###
